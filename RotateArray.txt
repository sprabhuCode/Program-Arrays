package Arrays;

/*
 * Given an array and a positive integer k, rotate the array k times.
Example:
Array:  1 2 3 4 5
k: 3
Output: 4 5 1 2 3
 */
public class RotateArrays {

	public static void main(String[] args) {
	int[] a = {1,2,3,4,5,6};
	int k=3;
	RotateArrays.rotateArray1(a, k);
	int[] b = {1,2,3,4,5,6};
	RotateArrays.rotateArray2(b, k);
	}
	
	//O(n) - Time complexity, O(1) -> space complexity
	//first reverse 0-> k-1, then revere k->a.lenght-1, then reverse the whole array
	public static void rotateArray1(int[] a,int k){
		if(k>a.length){
			k = a.length%k;
		}
		int i = 0; int j = k-1;
		int temp;
		while(i!=j){
			 temp = a[j];
			 a[j] = a[i];
			 a[i] = temp;
			 i++;
			 j--;
		}
		i = k; j = a.length-1;
		while(i!=j){
			 temp = a[j];
			 a[j] = a[i];
			 a[i] = temp;
			 i++;
			 j--;
		}
		
		i=0; j = a.length-1;
		while(i<j){
			 temp = a[j];
			 a[j] = a[i];
			 a[i] = temp;
			 i++;
			 j--;
		}
		
		for(int l = 0;l<a.length;l++){
			System.out.print(a[l] + " ");
		}
	}
	
	//tie complexity o(n), space = o(k)
	//store first k elements in an separate array 
	public static void rotateArray2(int[] a,int k){
		int[] arrayK = new int[k];
		for(int i=0;i<k;i++){
			arrayK[i] = a[i];
		}
		
		for(int i=k;i<a.length;i++){
			a[i-k] = a[i];
		}
		for(int i=a.length-k,  j=0;i<a.length;i++,j++){
			a[i] = arrayK[j];
		}
		
		for(int l = 0;l<a.length;l++){
			System.out.print(a[l] + " ");
		}
	}

}
